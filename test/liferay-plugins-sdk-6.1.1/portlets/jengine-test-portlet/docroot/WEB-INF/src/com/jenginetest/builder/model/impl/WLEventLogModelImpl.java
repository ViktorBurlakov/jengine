/*
 * This file is part of JEngine.
 *
 * Copyright (C) 2013 Victor Burlakov
 *
 * JEngine is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JEngine is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JEngine.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.jenginetest.builder.model.impl;

import com.jenginetest.builder.model.WLEventLog;
import com.jenginetest.builder.model.WLEventLogModel;
import com.jenginetest.builder.model.WLEventLogSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WLEventLog service. Represents a row in the &quot;WL_WLEventLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.jenginetest.builder.model.WLEventLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WLEventLogImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see WLEventLogImpl
 * @see com.jenginetest.builder.model.WLEventLog
 * @see com.jenginetest.builder.model.WLEventLogModel
 * @generated
 */
@JSON(strict = true)
public class WLEventLogModelImpl extends BaseModelImpl<WLEventLog>
	implements WLEventLogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a w l event log model instance should use the {@link com.jenginetest.builder.model.WLEventLog} interface instead.
	 */
	public static final String TABLE_NAME = "WL_WLEventLog";
	public static final Object[][] TABLE_COLUMNS = {
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "eventLogId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "logDate", Types.TIMESTAMP },
			{ "event", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "modelName", Types.VARCHAR },
			{ "modelPK", Types.BIGINT },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table WL_WLEventLog (groupId LONG,companyId LONG,eventLogId LONG not null primary key,userId LONG,logDate DATE null,event VARCHAR(75) null,title VARCHAR(75) null,modelName VARCHAR(75) null,modelPK LONG,description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table WL_WLEventLog";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.jenginetest.builder.model.WLEventLog"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.jenginetest.builder.model.WLEventLog"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WLEventLog toModel(WLEventLogSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WLEventLog model = new WLEventLogImpl();

		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setEventLogId(soapModel.getEventLogId());
		model.setUserId(soapModel.getUserId());
		model.setLogDate(soapModel.getLogDate());
		model.setEvent(soapModel.getEvent());
		model.setTitle(soapModel.getTitle());
		model.setModelName(soapModel.getModelName());
		model.setModelPK(soapModel.getModelPK());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WLEventLog> toModels(WLEventLogSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WLEventLog> models = new ArrayList<WLEventLog>(soapModels.length);

		for (WLEventLogSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.jenginetest.builder.model.WLEventLog"));

	public WLEventLogModelImpl() {
	}

	public long getPrimaryKey() {
		return _eventLogId;
	}

	public void setPrimaryKey(long primaryKey) {
		setEventLogId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_eventLogId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return WLEventLog.class;
	}

	public String getModelClassName() {
		return WLEventLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("eventLogId", getEventLogId());
		attributes.put("userId", getUserId());
		attributes.put("logDate", getLogDate());
		attributes.put("event", getEvent());
		attributes.put("title", getTitle());
		attributes.put("modelName", getModelName());
		attributes.put("modelPK", getModelPK());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long eventLogId = (Long)attributes.get("eventLogId");

		if (eventLogId != null) {
			setEventLogId(eventLogId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date logDate = (Date)attributes.get("logDate");

		if (logDate != null) {
			setLogDate(logDate);
		}

		String event = (String)attributes.get("event");

		if (event != null) {
			setEvent(event);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String modelName = (String)attributes.get("modelName");

		if (modelName != null) {
			setModelName(modelName);
		}

		Long modelPK = (Long)attributes.get("modelPK");

		if (modelPK != null) {
			setModelPK(modelPK);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getEventLogId() {
		return _eventLogId;
	}

	public void setEventLogId(long eventLogId) {
		_eventLogId = eventLogId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public Date getLogDate() {
		return _logDate;
	}

	public void setLogDate(Date logDate) {
		_logDate = logDate;
	}

	@JSON
	public String getEvent() {
		if (_event == null) {
			return StringPool.BLANK;
		}
		else {
			return _event;
		}
	}

	public void setEvent(String event) {
		_event = event;
	}

	@JSON
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	public String getModelName() {
		if (_modelName == null) {
			return StringPool.BLANK;
		}
		else {
			return _modelName;
		}
	}

	public void setModelName(String modelName) {
		_modelName = modelName;
	}

	@JSON
	public Long getModelPK() {
		return _modelPK;
	}

	public void setModelPK(Long modelPK) {
		_modelPK = modelPK;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			WLEventLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WLEventLog toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (WLEventLog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		WLEventLogImpl wlEventLogImpl = new WLEventLogImpl();

		wlEventLogImpl.setGroupId(getGroupId());
		wlEventLogImpl.setCompanyId(getCompanyId());
		wlEventLogImpl.setEventLogId(getEventLogId());
		wlEventLogImpl.setUserId(getUserId());
		wlEventLogImpl.setLogDate(getLogDate());
		wlEventLogImpl.setEvent(getEvent());
		wlEventLogImpl.setTitle(getTitle());
		wlEventLogImpl.setModelName(getModelName());
		wlEventLogImpl.setModelPK(getModelPK());
		wlEventLogImpl.setDescription(getDescription());

		wlEventLogImpl.resetOriginalValues();

		return wlEventLogImpl;
	}

	public int compareTo(WLEventLog wlEventLog) {
		long primaryKey = wlEventLog.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		WLEventLog wlEventLog = null;

		try {
			wlEventLog = (WLEventLog)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = wlEventLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<WLEventLog> toCacheModel() {
		WLEventLogCacheModel wlEventLogCacheModel = new WLEventLogCacheModel();

		wlEventLogCacheModel.groupId = getGroupId();

		wlEventLogCacheModel.companyId = getCompanyId();

		wlEventLogCacheModel.eventLogId = getEventLogId();

		wlEventLogCacheModel.userId = getUserId();

		Date logDate = getLogDate();

		if (logDate != null) {
			wlEventLogCacheModel.logDate = logDate.getTime();
		}
		else {
			wlEventLogCacheModel.logDate = Long.MIN_VALUE;
		}

		wlEventLogCacheModel.event = getEvent();

		String event = wlEventLogCacheModel.event;

		if ((event != null) && (event.length() == 0)) {
			wlEventLogCacheModel.event = null;
		}

		wlEventLogCacheModel.title = getTitle();

		String title = wlEventLogCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			wlEventLogCacheModel.title = null;
		}

		wlEventLogCacheModel.modelName = getModelName();

		String modelName = wlEventLogCacheModel.modelName;

		if ((modelName != null) && (modelName.length() == 0)) {
			wlEventLogCacheModel.modelName = null;
		}

		wlEventLogCacheModel.modelPK = getModelPK();

		wlEventLogCacheModel.description = getDescription();

		String description = wlEventLogCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			wlEventLogCacheModel.description = null;
		}

		return wlEventLogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", eventLogId=");
		sb.append(getEventLogId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", logDate=");
		sb.append(getLogDate());
		sb.append(", event=");
		sb.append(getEvent());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", modelName=");
		sb.append(getModelName());
		sb.append(", modelPK=");
		sb.append(getModelPK());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.jenginetest.builder.model.WLEventLog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventLogId</column-name><column-value><![CDATA[");
		sb.append(getEventLogId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logDate</column-name><column-value><![CDATA[");
		sb.append(getLogDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>event</column-name><column-value><![CDATA[");
		sb.append(getEvent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modelName</column-name><column-value><![CDATA[");
		sb.append(getModelName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modelPK</column-name><column-value><![CDATA[");
		sb.append(getModelPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = WLEventLog.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			WLEventLog.class
		};
	private long _groupId;
	private long _companyId;
	private long _eventLogId;
	private long _userId;
	private String _userUuid;
	private Date _logDate;
	private String _event;
	private String _title;
	private String _modelName;
	private Long _modelPK;
	private String _description;
	private WLEventLog _escapedModelProxy;
}