/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.jenginetest.builder.model.impl;

import com.jenginetest.builder.model.Member;
import com.jenginetest.builder.model.MemberModel;
import com.jenginetest.builder.model.MemberSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Member service. Represents a row in the &quot;SB_Member&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.jenginetest.builder.model.MemberModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MemberImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MemberImpl
 * @see com.jenginetest.builder.model.Member
 * @see com.jenginetest.builder.model.MemberModel
 * @generated
 */
@JSON(strict = true)
public class MemberModelImpl extends BaseModelImpl<Member>
	implements MemberModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a member model instance should use the {@link com.jenginetest.builder.model.Member} interface instead.
	 */
	public static final String TABLE_NAME = "SB_Member";
	public static final Object[][] TABLE_COLUMNS = {
			{ "memberId", Types.BIGINT },
			{ "libraryId", Types.BIGINT },
			{ "firstName", Types.VARCHAR },
			{ "lastName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SB_Member (memberId LONG not null primary key,libraryId LONG,firstName VARCHAR(75) null,lastName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SB_Member";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.jenginetest.builder.model.Member"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.jenginetest.builder.model.Member"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Member toModel(MemberSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Member model = new MemberImpl();

		model.setMemberId(soapModel.getMemberId());
		model.setLibraryId(soapModel.getLibraryId());
		model.setFirstName(soapModel.getFirstName());
		model.setLastName(soapModel.getLastName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Member> toModels(MemberSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Member> models = new ArrayList<Member>(soapModels.length);

		for (MemberSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.jenginetest.builder.model.Member"));

	public MemberModelImpl() {
	}

	public long getPrimaryKey() {
		return _memberId;
	}

	public void setPrimaryKey(long primaryKey) {
		setMemberId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_memberId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Member.class;
	}

	public String getModelClassName() {
		return Member.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("memberId", getMemberId());
		attributes.put("libraryId", getLibraryId());
		attributes.put("firstName", getFirstName());
		attributes.put("lastName", getLastName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long memberId = (Long)attributes.get("memberId");

		if (memberId != null) {
			setMemberId(memberId);
		}

		Long libraryId = (Long)attributes.get("libraryId");

		if (libraryId != null) {
			setLibraryId(libraryId);
		}

		String firstName = (String)attributes.get("firstName");

		if (firstName != null) {
			setFirstName(firstName);
		}

		String lastName = (String)attributes.get("lastName");

		if (lastName != null) {
			setLastName(lastName);
		}
	}

	@JSON
	public long getMemberId() {
		return _memberId;
	}

	public void setMemberId(long memberId) {
		_memberId = memberId;
	}

	@JSON
	public long getLibraryId() {
		return _libraryId;
	}

	public void setLibraryId(long libraryId) {
		_libraryId = libraryId;
	}

	@JSON
	public String getFirstName() {
		if (_firstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstName;
		}
	}

	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@JSON
	public String getLastName() {
		if (_lastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastName;
		}
	}

	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Member.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Member toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Member)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		MemberImpl memberImpl = new MemberImpl();

		memberImpl.setMemberId(getMemberId());
		memberImpl.setLibraryId(getLibraryId());
		memberImpl.setFirstName(getFirstName());
		memberImpl.setLastName(getLastName());

		memberImpl.resetOriginalValues();

		return memberImpl;
	}

	public int compareTo(Member member) {
		long primaryKey = member.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Member member = null;

		try {
			member = (Member)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = member.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Member> toCacheModel() {
		MemberCacheModel memberCacheModel = new MemberCacheModel();

		memberCacheModel.memberId = getMemberId();

		memberCacheModel.libraryId = getLibraryId();

		memberCacheModel.firstName = getFirstName();

		String firstName = memberCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			memberCacheModel.firstName = null;
		}

		memberCacheModel.lastName = getLastName();

		String lastName = memberCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			memberCacheModel.lastName = null;
		}

		return memberCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{memberId=");
		sb.append(getMemberId());
		sb.append(", libraryId=");
		sb.append(getLibraryId());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", lastName=");
		sb.append(getLastName());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.jenginetest.builder.model.Member");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>memberId</column-name><column-value><![CDATA[");
		sb.append(getMemberId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>libraryId</column-name><column-value><![CDATA[");
		sb.append(getLibraryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Member.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Member.class
		};
	private long _memberId;
	private long _libraryId;
	private String _firstName;
	private String _lastName;
	private Member _escapedModelProxy;
}