/*
 * This file is part of JEngine.
 *
 * Copyright (C) 2013 Victor Burlakov
 *
 * JEngine is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JEngine is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JEngine.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.jenginetest.builder.model.impl;

import com.jenginetest.builder.model.WLProjectUser;
import com.jenginetest.builder.model.WLProjectUserModel;
import com.jenginetest.builder.model.WLProjectUserSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WLProjectUser service. Represents a row in the &quot;WL_WLProjectUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.jenginetest.builder.model.WLProjectUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WLProjectUserImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see WLProjectUserImpl
 * @see com.jenginetest.builder.model.WLProjectUser
 * @see com.jenginetest.builder.model.WLProjectUserModel
 * @generated
 */
@JSON(strict = true)
public class WLProjectUserModelImpl extends BaseModelImpl<WLProjectUser>
	implements WLProjectUserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a w l project user model instance should use the {@link com.jenginetest.builder.model.WLProjectUser} interface instead.
	 */
	public static final String TABLE_NAME = "WL_WLProjectUser";
	public static final Object[][] TABLE_COLUMNS = {
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "projectUserId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "projectId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table WL_WLProjectUser (groupId LONG,companyId LONG,projectUserId LONG not null primary key,userId LONG,projectId LONG)";
	public static final String TABLE_SQL_DROP = "drop table WL_WLProjectUser";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.jenginetest.builder.model.WLProjectUser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.jenginetest.builder.model.WLProjectUser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.jenginetest.builder.model.WLProjectUser"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long PROJECTID_COLUMN_BITMASK = 4L;
	public static long USERID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WLProjectUser toModel(WLProjectUserSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WLProjectUser model = new WLProjectUserImpl();

		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setProjectUserId(soapModel.getProjectUserId());
		model.setUserId(soapModel.getUserId());
		model.setProjectId(soapModel.getProjectId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WLProjectUser> toModels(WLProjectUserSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WLProjectUser> models = new ArrayList<WLProjectUser>(soapModels.length);

		for (WLProjectUserSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.jenginetest.builder.model.WLProjectUser"));

	public WLProjectUserModelImpl() {
	}

	public long getPrimaryKey() {
		return _projectUserId;
	}

	public void setPrimaryKey(long primaryKey) {
		setProjectUserId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_projectUserId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return WLProjectUser.class;
	}

	public String getModelClassName() {
		return WLProjectUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("projectUserId", getProjectUserId());
		attributes.put("userId", getUserId());
		attributes.put("projectId", getProjectId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long projectUserId = (Long)attributes.get("projectUserId");

		if (projectUserId != null) {
			setProjectUserId(projectUserId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getProjectUserId() {
		return _projectUserId;
	}

	public void setProjectUserId(long projectUserId) {
		_projectUserId = projectUserId;
	}

	public String getProjectUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getProjectUserId(), "uuid",
			_projectUserUuid);
	}

	public void setProjectUserUuid(String projectUserUuid) {
		_projectUserUuid = projectUserUuid;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	public long getProjectId() {
		return _projectId;
	}

	public void setProjectId(long projectId) {
		_columnBitmask |= PROJECTID_COLUMN_BITMASK;

		if (!_setOriginalProjectId) {
			_setOriginalProjectId = true;

			_originalProjectId = _projectId;
		}

		_projectId = projectId;
	}

	public long getOriginalProjectId() {
		return _originalProjectId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			WLProjectUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WLProjectUser toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (WLProjectUser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		WLProjectUserImpl wlProjectUserImpl = new WLProjectUserImpl();

		wlProjectUserImpl.setGroupId(getGroupId());
		wlProjectUserImpl.setCompanyId(getCompanyId());
		wlProjectUserImpl.setProjectUserId(getProjectUserId());
		wlProjectUserImpl.setUserId(getUserId());
		wlProjectUserImpl.setProjectId(getProjectId());

		wlProjectUserImpl.resetOriginalValues();

		return wlProjectUserImpl;
	}

	public int compareTo(WLProjectUser wlProjectUser) {
		long primaryKey = wlProjectUser.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		WLProjectUser wlProjectUser = null;

		try {
			wlProjectUser = (WLProjectUser)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = wlProjectUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		WLProjectUserModelImpl wlProjectUserModelImpl = this;

		wlProjectUserModelImpl._originalGroupId = wlProjectUserModelImpl._groupId;

		wlProjectUserModelImpl._setOriginalGroupId = false;

		wlProjectUserModelImpl._originalCompanyId = wlProjectUserModelImpl._companyId;

		wlProjectUserModelImpl._setOriginalCompanyId = false;

		wlProjectUserModelImpl._originalUserId = wlProjectUserModelImpl._userId;

		wlProjectUserModelImpl._setOriginalUserId = false;

		wlProjectUserModelImpl._originalProjectId = wlProjectUserModelImpl._projectId;

		wlProjectUserModelImpl._setOriginalProjectId = false;

		wlProjectUserModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WLProjectUser> toCacheModel() {
		WLProjectUserCacheModel wlProjectUserCacheModel = new WLProjectUserCacheModel();

		wlProjectUserCacheModel.groupId = getGroupId();

		wlProjectUserCacheModel.companyId = getCompanyId();

		wlProjectUserCacheModel.projectUserId = getProjectUserId();

		wlProjectUserCacheModel.userId = getUserId();

		wlProjectUserCacheModel.projectId = getProjectId();

		return wlProjectUserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", projectUserId=");
		sb.append(getProjectUserId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.jenginetest.builder.model.WLProjectUser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectUserId</column-name><column-value><![CDATA[");
		sb.append(getProjectUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = WLProjectUser.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			WLProjectUser.class
		};
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _projectUserId;
	private String _projectUserUuid;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _projectId;
	private long _originalProjectId;
	private boolean _setOriginalProjectId;
	private long _columnBitmask;
	private WLProjectUser _escapedModelProxy;
}