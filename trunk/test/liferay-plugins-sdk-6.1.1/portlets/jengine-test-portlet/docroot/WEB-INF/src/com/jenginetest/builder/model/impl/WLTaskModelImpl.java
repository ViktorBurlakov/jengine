/*
 * This file is part of JEngine.
 *
 * Copyright (C) 2013 Victor Burlakov
 *
 * JEngine is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JEngine is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JEngine.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.jenginetest.builder.model.impl;

import com.jenginetest.builder.model.WLTask;
import com.jenginetest.builder.model.WLTaskModel;
import com.jenginetest.builder.model.WLTaskSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WLTask service. Represents a row in the &quot;WL_WLTask&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.jenginetest.builder.model.WLTaskModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WLTaskImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see WLTaskImpl
 * @see com.jenginetest.builder.model.WLTask
 * @see com.jenginetest.builder.model.WLTaskModel
 * @generated
 */
@JSON(strict = true)
public class WLTaskModelImpl extends BaseModelImpl<WLTask>
	implements WLTaskModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a w l task model instance should use the {@link com.jenginetest.builder.model.WLTask} interface instead.
	 */
	public static final String TABLE_NAME = "WL_WLTask";
	public static final Object[][] TABLE_COLUMNS = {
			{ "taskId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createUserId", Types.BIGINT },
			{ "createUserName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedUserId", Types.BIGINT },
			{ "modifiedUserName", Types.VARCHAR },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "subject", Types.VARCHAR },
			{ "projectId", Types.BIGINT },
			{ "ownerId", Types.BIGINT },
			{ "workerId", Types.BIGINT },
			{ "externalId", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table WL_WLTask (taskId LONG not null primary key,groupId LONG,companyId LONG,createUserId LONG,createUserName VARCHAR(75) null,createDate DATE null,modifiedUserId LONG,modifiedUserName VARCHAR(75) null,modifiedDate DATE null,subject VARCHAR(75) null,projectId LONG,ownerId LONG,workerId LONG,externalId VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table WL_WLTask";
	public static final String ORDER_BY_JPQL = " ORDER BY wlTask.taskId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY WL_WLTask.taskId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.jenginetest.builder.model.WLTask"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.jenginetest.builder.model.WLTask"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.jenginetest.builder.model.WLTask"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long EXTERNALID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long OWNERID_COLUMN_BITMASK = 8L;
	public static long PROJECTID_COLUMN_BITMASK = 16L;
	public static long SUBJECT_COLUMN_BITMASK = 32L;
	public static long WORKERID_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WLTask toModel(WLTaskSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WLTask model = new WLTaskImpl();

		model.setTaskId(soapModel.getTaskId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateUserId(soapModel.getCreateUserId());
		model.setCreateUserName(soapModel.getCreateUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedUserId(soapModel.getModifiedUserId());
		model.setModifiedUserName(soapModel.getModifiedUserName());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setSubject(soapModel.getSubject());
		model.setProjectId(soapModel.getProjectId());
		model.setOwnerId(soapModel.getOwnerId());
		model.setWorkerId(soapModel.getWorkerId());
		model.setExternalId(soapModel.getExternalId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WLTask> toModels(WLTaskSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WLTask> models = new ArrayList<WLTask>(soapModels.length);

		for (WLTaskSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.jenginetest.builder.model.WLTask"));

	public WLTaskModelImpl() {
	}

	public long getPrimaryKey() {
		return _taskId;
	}

	public void setPrimaryKey(long primaryKey) {
		setTaskId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_taskId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return WLTask.class;
	}

	public String getModelClassName() {
		return WLTask.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("taskId", getTaskId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createUserId", getCreateUserId());
		attributes.put("createUserName", getCreateUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedUserId", getModifiedUserId());
		attributes.put("modifiedUserName", getModifiedUserName());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("subject", getSubject());
		attributes.put("projectId", getProjectId());
		attributes.put("ownerId", getOwnerId());
		attributes.put("workerId", getWorkerId());
		attributes.put("externalId", getExternalId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long taskId = (Long)attributes.get("taskId");

		if (taskId != null) {
			setTaskId(taskId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long createUserId = (Long)attributes.get("createUserId");

		if (createUserId != null) {
			setCreateUserId(createUserId);
		}

		String createUserName = (String)attributes.get("createUserName");

		if (createUserName != null) {
			setCreateUserName(createUserName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long modifiedUserId = (Long)attributes.get("modifiedUserId");

		if (modifiedUserId != null) {
			setModifiedUserId(modifiedUserId);
		}

		String modifiedUserName = (String)attributes.get("modifiedUserName");

		if (modifiedUserName != null) {
			setModifiedUserName(modifiedUserName);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long ownerId = (Long)attributes.get("ownerId");

		if (ownerId != null) {
			setOwnerId(ownerId);
		}

		Long workerId = (Long)attributes.get("workerId");

		if (workerId != null) {
			setWorkerId(workerId);
		}

		String externalId = (String)attributes.get("externalId");

		if (externalId != null) {
			setExternalId(externalId);
		}
	}

	@JSON
	public long getTaskId() {
		return _taskId;
	}

	public void setTaskId(long taskId) {
		_columnBitmask = -1L;

		_taskId = taskId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getCreateUserId() {
		return _createUserId;
	}

	public void setCreateUserId(long createUserId) {
		_createUserId = createUserId;
	}

	public String getCreateUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getCreateUserId(), "uuid",
			_createUserUuid);
	}

	public void setCreateUserUuid(String createUserUuid) {
		_createUserUuid = createUserUuid;
	}

	@JSON
	public String getCreateUserName() {
		if (_createUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _createUserName;
		}
	}

	public void setCreateUserName(String createUserName) {
		_createUserName = createUserName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public long getModifiedUserId() {
		return _modifiedUserId;
	}

	public void setModifiedUserId(long modifiedUserId) {
		_modifiedUserId = modifiedUserId;
	}

	public String getModifiedUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getModifiedUserId(), "uuid",
			_modifiedUserUuid);
	}

	public void setModifiedUserUuid(String modifiedUserUuid) {
		_modifiedUserUuid = modifiedUserUuid;
	}

	@JSON
	public String getModifiedUserName() {
		if (_modifiedUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedUserName;
		}
	}

	public void setModifiedUserName(String modifiedUserName) {
		_modifiedUserName = modifiedUserName;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getSubject() {
		if (_subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _subject;
		}
	}

	public void setSubject(String subject) {
		_columnBitmask |= SUBJECT_COLUMN_BITMASK;

		if (_originalSubject == null) {
			_originalSubject = _subject;
		}

		_subject = subject;
	}

	public String getOriginalSubject() {
		return GetterUtil.getString(_originalSubject);
	}

	@JSON
	public long getProjectId() {
		return _projectId;
	}

	public void setProjectId(long projectId) {
		_columnBitmask |= PROJECTID_COLUMN_BITMASK;

		if (!_setOriginalProjectId) {
			_setOriginalProjectId = true;

			_originalProjectId = _projectId;
		}

		_projectId = projectId;
	}

	public long getOriginalProjectId() {
		return _originalProjectId;
	}

	@JSON
	public long getOwnerId() {
		return _ownerId;
	}

	public void setOwnerId(long ownerId) {
		_columnBitmask |= OWNERID_COLUMN_BITMASK;

		if (!_setOriginalOwnerId) {
			_setOriginalOwnerId = true;

			_originalOwnerId = _ownerId;
		}

		_ownerId = ownerId;
	}

	public long getOriginalOwnerId() {
		return _originalOwnerId;
	}

	@JSON
	public long getWorkerId() {
		return _workerId;
	}

	public void setWorkerId(long workerId) {
		_columnBitmask |= WORKERID_COLUMN_BITMASK;

		if (!_setOriginalWorkerId) {
			_setOriginalWorkerId = true;

			_originalWorkerId = _workerId;
		}

		_workerId = workerId;
	}

	public long getOriginalWorkerId() {
		return _originalWorkerId;
	}

	@JSON
	public String getExternalId() {
		if (_externalId == null) {
			return StringPool.BLANK;
		}
		else {
			return _externalId;
		}
	}

	public void setExternalId(String externalId) {
		_columnBitmask |= EXTERNALID_COLUMN_BITMASK;

		if (_originalExternalId == null) {
			_originalExternalId = _externalId;
		}

		_externalId = externalId;
	}

	public String getOriginalExternalId() {
		return GetterUtil.getString(_originalExternalId);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			WLTask.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WLTask toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (WLTask)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		WLTaskImpl wlTaskImpl = new WLTaskImpl();

		wlTaskImpl.setTaskId(getTaskId());
		wlTaskImpl.setGroupId(getGroupId());
		wlTaskImpl.setCompanyId(getCompanyId());
		wlTaskImpl.setCreateUserId(getCreateUserId());
		wlTaskImpl.setCreateUserName(getCreateUserName());
		wlTaskImpl.setCreateDate(getCreateDate());
		wlTaskImpl.setModifiedUserId(getModifiedUserId());
		wlTaskImpl.setModifiedUserName(getModifiedUserName());
		wlTaskImpl.setModifiedDate(getModifiedDate());
		wlTaskImpl.setSubject(getSubject());
		wlTaskImpl.setProjectId(getProjectId());
		wlTaskImpl.setOwnerId(getOwnerId());
		wlTaskImpl.setWorkerId(getWorkerId());
		wlTaskImpl.setExternalId(getExternalId());

		wlTaskImpl.resetOriginalValues();

		return wlTaskImpl;
	}

	public int compareTo(WLTask wlTask) {
		int value = 0;

		if (getTaskId() < wlTask.getTaskId()) {
			value = -1;
		}
		else if (getTaskId() > wlTask.getTaskId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		WLTask wlTask = null;

		try {
			wlTask = (WLTask)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = wlTask.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		WLTaskModelImpl wlTaskModelImpl = this;

		wlTaskModelImpl._originalGroupId = wlTaskModelImpl._groupId;

		wlTaskModelImpl._setOriginalGroupId = false;

		wlTaskModelImpl._originalCompanyId = wlTaskModelImpl._companyId;

		wlTaskModelImpl._setOriginalCompanyId = false;

		wlTaskModelImpl._originalSubject = wlTaskModelImpl._subject;

		wlTaskModelImpl._originalProjectId = wlTaskModelImpl._projectId;

		wlTaskModelImpl._setOriginalProjectId = false;

		wlTaskModelImpl._originalOwnerId = wlTaskModelImpl._ownerId;

		wlTaskModelImpl._setOriginalOwnerId = false;

		wlTaskModelImpl._originalWorkerId = wlTaskModelImpl._workerId;

		wlTaskModelImpl._setOriginalWorkerId = false;

		wlTaskModelImpl._originalExternalId = wlTaskModelImpl._externalId;

		wlTaskModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WLTask> toCacheModel() {
		WLTaskCacheModel wlTaskCacheModel = new WLTaskCacheModel();

		wlTaskCacheModel.taskId = getTaskId();

		wlTaskCacheModel.groupId = getGroupId();

		wlTaskCacheModel.companyId = getCompanyId();

		wlTaskCacheModel.createUserId = getCreateUserId();

		wlTaskCacheModel.createUserName = getCreateUserName();

		String createUserName = wlTaskCacheModel.createUserName;

		if ((createUserName != null) && (createUserName.length() == 0)) {
			wlTaskCacheModel.createUserName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			wlTaskCacheModel.createDate = createDate.getTime();
		}
		else {
			wlTaskCacheModel.createDate = Long.MIN_VALUE;
		}

		wlTaskCacheModel.modifiedUserId = getModifiedUserId();

		wlTaskCacheModel.modifiedUserName = getModifiedUserName();

		String modifiedUserName = wlTaskCacheModel.modifiedUserName;

		if ((modifiedUserName != null) && (modifiedUserName.length() == 0)) {
			wlTaskCacheModel.modifiedUserName = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			wlTaskCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			wlTaskCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		wlTaskCacheModel.subject = getSubject();

		String subject = wlTaskCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			wlTaskCacheModel.subject = null;
		}

		wlTaskCacheModel.projectId = getProjectId();

		wlTaskCacheModel.ownerId = getOwnerId();

		wlTaskCacheModel.workerId = getWorkerId();

		wlTaskCacheModel.externalId = getExternalId();

		String externalId = wlTaskCacheModel.externalId;

		if ((externalId != null) && (externalId.length() == 0)) {
			wlTaskCacheModel.externalId = null;
		}

		return wlTaskCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{taskId=");
		sb.append(getTaskId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createUserId=");
		sb.append(getCreateUserId());
		sb.append(", createUserName=");
		sb.append(getCreateUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedUserId=");
		sb.append(getModifiedUserId());
		sb.append(", modifiedUserName=");
		sb.append(getModifiedUserName());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", ownerId=");
		sb.append(getOwnerId());
		sb.append(", workerId=");
		sb.append(getWorkerId());
		sb.append(", externalId=");
		sb.append(getExternalId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.jenginetest.builder.model.WLTask");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>taskId</column-name><column-value><![CDATA[");
		sb.append(getTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createUserId</column-name><column-value><![CDATA[");
		sb.append(getCreateUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createUserName</column-name><column-value><![CDATA[");
		sb.append(getCreateUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedUserId</column-name><column-value><![CDATA[");
		sb.append(getModifiedUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedUserName</column-name><column-value><![CDATA[");
		sb.append(getModifiedUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ownerId</column-name><column-value><![CDATA[");
		sb.append(getOwnerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workerId</column-name><column-value><![CDATA[");
		sb.append(getWorkerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>externalId</column-name><column-value><![CDATA[");
		sb.append(getExternalId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = WLTask.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			WLTask.class
		};
	private long _taskId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _createUserId;
	private String _createUserUuid;
	private String _createUserName;
	private Date _createDate;
	private long _modifiedUserId;
	private String _modifiedUserUuid;
	private String _modifiedUserName;
	private Date _modifiedDate;
	private String _subject;
	private String _originalSubject;
	private long _projectId;
	private long _originalProjectId;
	private boolean _setOriginalProjectId;
	private long _ownerId;
	private long _originalOwnerId;
	private boolean _setOriginalOwnerId;
	private long _workerId;
	private long _originalWorkerId;
	private boolean _setOriginalWorkerId;
	private String _externalId;
	private String _originalExternalId;
	private long _columnBitmask;
	private WLTask _escapedModelProxy;
}